tt[1]
tt[2]
tt[3]
tt[4]
rdply(20, mean(runif(100)))
require(plyr)
rdply(20, mean(runif(100)))
rdply(10,SimulatedNbTosses())
rdply(10,SimulatedNbTosses1())
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/weatherPlotShiny')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
coin = function(){
a =runif(1)
if (a>0.5) return(1)
else return(0)
}
count=res=0
aaa = function(){
if (res==2) return(count)
else {if (coin()==1) {count=count+1
res=1+res
aaa()
}
else {res=0
count=count+1
aaa()
}
#aaa()
}
}
aaa()
aaa = function(){
if (res==2) return(count)
else {if (coin()==1) {count=count+1
res=1+res
}
else {res=0
count=count+1
}
aaa()
}
}
aaa()
fact = function(n){
if (n==0) return(1)
else return(n*fact(n-1))
}
fact(10)
fact(5)
fact(6)
fact(13)
fact(20)
fact(50)
?ifelse
count=res=0
aaa = function(){
if (res==2) return(count)
else {count=count+1
ifelse (coin()==1,res=1+res,res=0)}
aaa()
}
}
count=res=0
aaa = function(){
if (res==2) return(count)
else {count=count+1
ifelse (coin()==1,res=1+res,res=0)}
aaa()
}
aaa()
res=0
ifelse(coin()==1,res=1+res,res=0)
count=res=0
aaa = function(){
if (res==2) return(count)
else {count=count+1
#ifelse(coin()==1,res=1+res,res=0)
res = (coin()==1)+1
}
aaa()
}
aaa()
(coin()==1)+1
(coin()==1)+1
(coin()==1)+1
(coin()==1)+1
(coin()==1)+1
(coin()==1)+1
(coin()==1)+1
(coin()==1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,0,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
ifelse(coin()==1,1,-1)+1
aaa = function(){
if (res==2) return(count)
else {count=count+1
res = ifelse(coin()==1,1,-1)+1
}
aaa()
}
aaa = function(){
if (res==2) return(count)
else {count=count+1
res = ifelse(coin()==1,1,-1)+1
}
aaa()
}
ifelse(coin()==1,1,-1)+1
clear
aaa()
date
date()
sys.date()
SYS.date()
date()
count=res=0
aaa = function(){
if (res==2) return(count)
else {count=count+1
res = ifelse(coin()==1,1,-1)+1
aaa()
}
#aaa()
}
aaa()
aaa = function(){
count=count+1
res = ifelse(coin()==1,1,-1)+res
if (res==2) return(count)
else {
aaa()
}
#aaa()
}
aaa()
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
aa = c(1,2)
length(aa)
shiny::runApp('Desktop/Boston_Housing')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/shinytheme')
shiny::runApp('Desktop/Boston_Housing')
shiny::runApp('Desktop/weatherPlotShiny')
shiny::runApp('Desktop/weatherPlotShiny')
shiny::runApp('Desktop/temperaturePlot')
shiny::runApp('Desktop/temperaturePlot')
shiny::runApp('Desktop/R_stock_chart')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/R_stock_chart')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
data.frame(Lat = 1:10, Long = rnorm(10))
leaflet().
leaflet()
require(leaflet)
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
leaflet(df) %>% addCircles(lat = ~ Lat, lng = ~ Long)
leaflet() %>% addCircles(data = df)
leaflet() %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates
leaflet(data = mapStates) %>% addTiles()
%>%
leaflet(data = mapStates)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
library(ggplot2)
shiny::runApp('Desktop/R_stock_chart')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
shiny::runApp('Desktop/stock2')
help(csv)
help(??csv)
??csv
sep=",", row.names="id")
dat <- read.table("headlines20150615.csv", header=TRUE, sep=",", row.names="id")
d
dat <- read.table("headlines20150615.csv", header=TRUE, sep=",")
dat
View(dat)
View(dat)
table(dat$headline)
aa = table(dat$headline)
type(aa)
class(aa)
aa[1]
aa[2]
aa[3]
describe(aa)
summary(aa)
help(table)
aa[order(aa[,2], decreasing=T),]
aa[,2]
aa[2]
aa[order(aa[2], decreasing=T),]
aa
aa[2,]
aa[,1]
aa[order(aa, decreasing=T),]
dim(aa)
aa[5]
aa[,1]
aa[1,]
bb = as.data.frame(aa)
bb[,2]
bb[order(bb, decreasing=T),]
bb[order(bb[,2], decreasing=T),]
ff = function(x,y){return x+y}
ff = function(x,y){return(x+y)}
ff(1,2)
345 %>% ff(2)
require(dplyr)
345 %>% ff(2)
require(tidyr)
cases
data()
iris
iris1 = mutate(iris, sepal = Sepal.Length + Sepal. Width)
iris1 = mutate(iris, sepal = Sepal.Length + Sepal.Width)
View(iris1)
iris2 = mutate(iris, sepal = Sepal.Length + Sepal.Width, sepal2 = Sepal.Length)
View(iris2)
View(iris2)
mutate_each(iris, funs(min_rank))
iris3 = mutate_each(iris, funs(min_rank))
View(iris3)
View(iris1)
View(iris2)
View(iris3)
View(iris3)
View(iris3)
tbl_df(iris)
glimpse(iris)
mean(abs(rnorm(100)))
Nile
mean(Nile)
sd(Nile)
max(Nile)
min(Nile)
median(Nile)
hist(Nile)
str(hist(Nile))
Nile
plot(Nile)
example(histogram)
example(plot)
getwd()
clear
a
example(persp)
typeof(Nile)
typeof(c(1,2))
"+"(2,3)
"+"(2,3,5,6,7,8,4,5,5)
"+"(2,3,5,6,7,8,4,5,5)
"+"(2)
"+"(2,3)
"+"(2,3,4)
700:1
1:10000
?:
?':'
seq(1,234)
seq(from=1.1,to=2,length=10)
x <- c(5,12,13)
x
seq(x)
x = NULL
x
seq(x)
any(F,F,F)
any(T,F,T)
all(F,T,T)
all(T,T)
preda <- function(x,k) {
n <- length(x)
k2 <- k/2
# the vector pred will contain our predicted values
pred <- vector(length=n-k)
for (i in 1:(n-k)) {
if (sum(x[i:(i+(k-1))]) >= k2) pred[i] <- 1 else pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
y <- c(5,2,-3,8)
cumsum(y)
predc <- function(x,k) {
n <- length(x)
k2 <- k/2
# the vector red will contain our predicted values
pred <- vector(length=n-k)
csx <- c(0,cumsum(x))
for (i in 1:(n-k)) {
if (csx[i+k] - csx[i] >= k2) pred[i] <- 1 else pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
predc((1,1,1,0,1,1,1,1,0,1),2)
predc(c(1,1,1,0,1,1,1,1,0,1),2)
predc(c(1,1,1,0,1,1,1,1,0,1),3)
predc(c(1,1,1,0,1,1,1,1,0,1),4)
predc(c(1,1,1,0,1,1,1,1,0,1),5)
predc(c(1,1,1,0,1,1,1,1,0,1),6)
sqrt(1:1000)
y = 1:10
'+'(y,10)
'+'(y,1000)
'+'(y,100000000000000)
'*'(y,123)
y*19
y*1234
y/1293
z <- c(5,2,-3,8)
z*z>8
x = z*z>8
x
mode(x)
Ablone
Abalone
g = c( "M", "F", "F", "I", "M", "M", "F")
g
a = which(g == "M")
b = which(g == "F")
c = which(g == "I")
a
b
c
ifelse(g == "M",1,ifelse(g == "F",2,3))
require("sas7bdat")
install.packages("/media/pei/ACS/sas7bdat_0.5.tar.gz", repos = NULL, type = "source")
require("sas7bdat")
getwd()
mydata=read.sas7bdat("dm.sas7bdat")
mydata=read.sas7bdat("dm.sas7bdat")
mydata=read.sas7bdat("ae.sas7bdat")
read.table("dm.csv",header=T)
read.table("dm.csv")
read.csv("dm.csv")
mydate = read.csv("dm.csv")
View(mydate)
require(tidyr)
require(dplyr)
mydata = read.csv("dm.csv")
View(mydata)
dm = read.csv("dm.csv")
View(dm)
dm1 = filter(dm,ENRLID ! is.na)
dm1 = filter(dm,ENRLID !is.na)
dm1 = filter(dm,ENRLID ~is.na)
dm1 = filter(dm,ENRLID is.na)
dm1 = filter(dm,dm1.ENRLID is.na)
dm1 = filter(dm,dm1['ENRLID'] is.na)
filter
dm1 = filter(dm,dm['ENRLID'] is.na)
filter(iris,Sepal.Length>7)
dm1 = filter(dm,ENRLID is.na)
filter(dm,ENRLID is.na)
filter(dm , ENRLID > 2)
filter(dm,ENRLID = is.na)
filter(dm,ENRLID isna)
filter(dm,ENRLID != NA)
filter(dm,is.na(ENRLID))
dm1 = filter(dm,!is.na(ENRLID))
View(dm1)
remove(mydate
)
remove(mydata
)
dm2 = dm1[,c('ENRLID', 'SiteID', 'DOB', 'SEX', 'RACE', 'ETHNICIT', 'CHILDPOT', 'RACEOTH', 'DAIGNOS', 'CATTHER', 'EvtDt')]
View(dm2)
studyid = 'SA-309JG'
dm2$STUDYID = studyid
View(dm2)
dm2$DOMAIN = 'DM'
View(dm2)
mutate(dm2,USUBJID=STUDYID+'-'+ENRLID)
dm2$STUDYID
dm2$ENRLID
str(dm2$ENRLID)
toString(dm2$ENRLID)
mutate(dm2,USUBJID=STUDYID+'-')
mutate(dm2,USUBJID=paste(STUDYID,'-')
)
mutate(dm2,USUBJID=paste(STUDYID,'-',ENRLID)
)
help(paste)
mutate(dm2,USUBJID=paste(STUDYID,'-',ENRLID,sep = ""))
dm2$SUBJID = ENRLID
dm2$DMDTC = EvtDt
dm2$SUBJID = dm2$ENRLID
dm2$DMDTC = dm2$EvtDt
View(dm2)
dm1 = dm2
View(dm1)
getwd()
d_CTLA4 = red.csv("dCTLA4_data.csv")
d_CTLA4 = read.csv("dCTLA4_data.csv")
View(d_CTLA4)
help(read.csv)
d_CTLA4 = read.csv("dCTLA4_data.csv",sep = "")
View(d_CTLA4)
d_CTLA4$CTLA4
d_CTLA4$CTLA4.AUCavg
d_CTLA4$Treatment.All
test.Gd = groupedData(logit_34 ~ CTLA4.AUCavg|Treatment.All, data=d_CTLA4)
require(nlme)
library(lattice)
test.Gd = groupedData(logit_34 ~ CTLA4.AUCavg|Treatment.All, data=d_CTLA4)
View(test.Gd)
test.Gd
head(test.Gd)
Orthodont
Orth.new <-  # create a new copy of the groupedData object
groupedData( distance ~ age | Subject,
data = as.data.frame( Orthodont ),
FUN = mean,
outer = ~ Sex,
labels = list( x = "Age",
y = "Distance from pituitary to pterygomaxillary fissure" ),
units = list( x = "(yr)", y = "(mm)") )
View(Orth.new)
class(Orth.new)
help(nlme)
data(Theoph)
Theoph
plo(Indometh)
plot(Indometh)
nls
nlsList
xx = nls(conc ~ SSbiexp(time,A1,lrc1,A2,lrc2),data=Indometh)
summary(xx)
head(Indometh)
xx
yy = nlsList(conc ~ SSbiexp(time,A1,lrc1,A2,lrc2),data=Indometh)
?nlsList
??nlsList
require(nlme)
yy = nlsList(conc ~ SSbiexp(time,A1,lrc1,A2,lrc2),data=Indometh)
yy
zz = nlme(yy,random = pdDiga(A1+lrc1+A2+lrc2~1))
zz = nlme(yy,random = pdDiag(A1+lrc1+A2+lrc2~1))
zz
shiny::runApp('Desktop/temperaturePlot')
shinyapps::setAccountInfo(name='pm2014', token='50B0E158BFD762C9E4399FAB9A94FC3C', secret='iOu6MZYz2of/zopvRrW3p001ezaudBD5EopKEgWu')
shiny::runApp('Desktop/temperaturePlot')
shinyapps::setAccountInfo(name='pm2014',
token='50B0E158BFD762C9E4399FAB9A94FC3C',
secret='iOu6MZYz2of/zopvRrW3p001ezaudBD5EopKEgWu')
shiny::runApp('Desktop/temperaturePlot')
shiny::runApp('Desktop/temperaturePlot')
shinyapps::setAccountInfo(name='pm2014', token='F57A0143CC2455B9978D90E7A77BA857', secret='MsHOv3xe0MnmaCAwDljNLNOHHOdnkfV/TAOwuPNB')
shiny::runApp('Desktop/temperaturePlot')
shiny::runApp('Desktop/temperaturePlot')
deployApp('~/Desktop/temperaturePlot')
require(shiny)
deployApp('~/Desktop/temperaturePlot')
library(shinyapps)
deployApp()
deployApp('~/Desktop/temperaturePlot')
shiny::runApp('Desktop/temperaturePlot')
